// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2020-01-11
// Last modified: 2024-05-17

// Modified by me to generate alerts on DWMY open level crossings and customize/filter them out
// version 1.3

// @version=5
indicator("Daily Weekly Monthly Yearly Opens ALERTS", "DWMY ALERT", true, max_lines_count=500)

//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var HEAD_PADDING        = -2
var HEAD_TRANSP         = 60
var LABEL_SIZE          = size.small
var LABEL_STYLE         = label.style_none
var LINE_STYLE          = line.style_solid
var LINE_WIDTH          = 1
var OFFSET_PADDING      = 4
var TAIL_STYLE          = line.style_dotted

//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

t_tails                 = "Extends last opens on historical bars."
t_heads                 = "Extends previous opens in the future."
t_discoverPrices        = "Discovers the opening prices from the intraday chart.\n\nYou may use this setting when there are discrepancies between the data from intraday and high time frames."
t_extendedHours         = "Discovers the opening prices from the extended trading hours if available."

var i_isDailyEnabled    = input     (true,          "Daily",                                inline="Daily",     group="Opens")
var i_dailyColor        = input     (color.green,   "",                                     inline="Daily",     group="Opens")
var i_dailyLookback     = input.int (1,             "", 1,                                  inline="Daily",     group="Opens")
var i_isWeeklyEnabled   = input     (true,          "Weekly",                               inline="Weekly",    group="Opens")
var i_weeklyColor       = input     (color.orange,  "",                                     inline="Weekly",    group="Opens")
var i_weeklyLookback    = input.int (1,             "", 1,                                  inline="Weekly",    group="Opens")
var i_isMonthlyEnabled  = input     (true,          "Monthly",                              inline="Monthly",   group="Opens")
var i_monthlyColor      = input     (color.red,     "",                                     inline="Monthly",   group="Opens")
var i_monthlyLookback   = input.int (1,             "", 1,                                  inline="Monthly",   group="Opens")
var i_isYearlyEnabled   = input     (true,          "Yearly",                               inline="Yearly",    group="Opens")
var i_yearlyColor       = input     (color.blue,    "",                                     inline="Yearly",    group="Opens")
var i_yearlyLookback    = input.int (1,             "", 1,                                  inline="Yearly",    group="Opens")
var i_rightOffset       = input.int (20,            "Offset", 1,                                                group="Style")
var i_areTailsEnabled   = input     (false,         "Show Tails",       t_tails,                                group="Style")
var i_areHeadsEnabled   = input     (false,         "Show Projections", t_heads,                                group="Style")
var i_discoverPrices    = input     (false,         "Discover Prices",  t_discoverPrices,                       group="Settings")
var i_extendedHours     = input     (false,         "Extended Hours",   t_extendedHours,                        group="Settings")

var i_enable_d_alert = input.bool(true, "Daily cross alert", "Enables or disables alerts on the Daily open cross", group="Alerts")
var i_enable_m_alert = input.bool(true, "Monthly cross alert", "Enables or disables alerts on the Monthly open cross", group="Alerts")
var i_enable_w_alert = input.bool(true, "Weekly cross alert", "Enables or disables alerts on the Weekly open cross", group="Alerts")
var i_enable_y_alert = input.bool(true, "Yearly cross alert", "Enables or disables alerts on the Yearly open cross", group="Alerts")
var i_alert_trigger = input.string("Candle close", "Alert trigger", ["Candle close", "Real-time"], "Change whether to send an alert when candle closed and crossed DWMY, or real-time cross.")
var i_deadzone_enable = input.bool(true, "Enable deadzone", "Enables or disables the deadzone", inline="01", group="Alerts")
var i_deadzone_percentage = input.float(1, "%", minval=0, maxval=100,step=0.05, inline="01", group="Alerts", tooltip = "After alerting any of the DWMY, price movements within this % range (+x% and -x%) will be ignored. After price moves outside of this range the alerts will be resumed again. e.g. if the DO is $1 and deadzone is 1% then the deadzone would be the 0.99-1.01 range.")
var i_time_ignore = input.float(10, "Time to deadzone reset", minval=0, maxval=60,step=1, inline="00", group="Alerts", tooltip = "Disables the deadzone after x minutes. Set to 0 to disable")


//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------
series int last_alert_time = na
var a_lastOpens             = array.new_float(4)
var canShowDaily            = i_isDailyEnabled and timeframe.isintraday
var canShowWeekly           = i_isWeeklyEnabled and (timeframe.isintraday or timeframe.isdaily)
var canShowMonthly          = i_isMonthlyEnabled and not timeframe.ismonthly
var canShowYearly           = i_isYearlyEnabled and not (timeframe.ismonthly and timeframe.multiplier >= 12)
var hasExtendedHours        = i_extendedHours and syminfo.session == session.extended
var discoverPrices          = i_discoverPrices or hasExtendedHours

[dailyTime, dailyOpen]      = request.security(syminfo.tickerid, 'D',   [time, open], lookahead=barmerge.lookahead_on)
[weeklyTime, weeklyOpen]    = request.security(syminfo.tickerid, 'W',   [time, open], lookahead=barmerge.lookahead_on)
[monthlyTime, monthlyOpen]  = request.security(syminfo.tickerid, 'M',   [time, open], lookahead=barmerge.lookahead_on)
[yearlyTime, yearlyOpen]    = request.security(syminfo.tickerid, '12M', [time, open], lookahead=barmerge.lookahead_on)

hasDailyTimeChanged         = hasExtendedHours ? time_tradingday != time_tradingday[1] : dailyTime != dailyTime[1]
hasWeekklyTimeChanged       = hasExtendedHours ? weekofyear != weekofyear[1] : weeklyTime != weeklyTime[1]
hasMonthlyTimeChanged       = hasExtendedHours ? month != month[1] : monthlyTime != monthlyTime[1]
hasYearlyTimeChanged        = hasExtendedHours ? year != year[1] : yearlyTime != yearlyTime[1]


trigger_value = i_alert_trigger == "Candle close" ? 1 : 0
last_price = request.security(syminfo.tickerid, "1", close[trigger_value])

var a_deadzone_checks = array.new_bool(4, false)

if hasDailyTimeChanged or hasWeekklyTimeChanged or hasMonthlyTimeChanged or hasYearlyTimeChanged
    array.set(a_deadzone_checks, 0, true)
    array.set(a_deadzone_checks, 1, true)
    array.set(a_deadzone_checks, 2, true)
    array.set(a_deadzone_checks, 3, true)

//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

f_calculate_price_deadzone_range(float dwmo_price) =>
    float range_offset = dwmo_price * i_deadzone_percentage / 100
    [dwmo_price - range_offset, dwmo_price + range_offset]

f_check_deadzone(float dwmo_price, float last_price) =>
    if not i_deadzone_enable
        false

    [low_range, high_range] = f_calculate_price_deadzone_range(dwmo_price)
    if last_price > high_range or last_price < low_range
        false
    else
        true

// If different opens share the same opening prices, their labels will overlap
// Instead, we pad the higher time frame ones for achieving a "separator sheet"
f_getPadding(int _index) =>
    _padding = 0
    // Weekly, monthly, or yearly overlaps the daily open
    if _index > 0 and canShowDaily and array.get(a_lastOpens, 0) == array.get(a_lastOpens, _index)
        _padding += 1
    // Monthly or yearly overlaps the weekly open
    if _index > 1 and canShowWeekly and array.get(a_lastOpens, 1) == array.get(a_lastOpens, _index)
        _padding += 1
    // Yearly overlaps the monthly open
    if _index > 2 and canShowMonthly and array.get(a_lastOpens, 2) == array.get(a_lastOpens, _index)
        _padding += 1
    _padding

f_getRightBarIndex(int _padding) => bar_index + i_rightOffset + _padding * OFFSET_PADDING

// On the weekly time frame, the monthly/yearly open is drawn from the first candle of the month/year
// The first weekly candle is not necessarily containing the first day of the month
// In such case, we visually anchor the open of the previous weekly candle
f_isContainedOnPrevWeekly(int _time) => timeframe.isweekly and dayofmonth(time) > dayofmonth(_time)

// Create and update an open level. An open is composed of a label, a "body" line, and optional "tail" and "head" lines extensions
f_draw(bool _newOpen, float _y, int _lookback, int _padding, color _color, string _text, bool _prevTime=false) =>
    var line _body  = na 
    var _label      = label.new(na, na, _text, style=LABEL_STYLE, textcolor=_color, size=LABEL_SIZE)
    var _tail       = line.new(na, na, na, na, color=_color, style=TAIL_STYLE, width=LINE_WIDTH, extend=extend.left)
    var _bodies     = array.new_line()
    var _heads      = array.new_line()
    _start          = _prevTime ? bar_index - 1 : bar_index
    _end            = f_getRightBarIndex(_padding)

    if _newOpen
        // Label
        label.set_xy(_label, _end, _y)
        label.set_tooltip(_label, str.tostring(_y, format.mintick))

        // Body
        line.set_x2(_body, bar_index)
        _body := line.new(_start, _y, _end, _y, color=_color, style=LINE_STYLE, width=LINE_WIDTH)
        array.push(_bodies, _body)

        // Head
        if i_areHeadsEnabled
            array.push(_heads, line.new(bar_index, _y, bar_index, _y, color=color.new(_color, HEAD_TRANSP), style=LINE_STYLE, width=LINE_WIDTH))

        // Tail
        if i_areTailsEnabled
            line.set_xy1(_tail, _start - 1, _y)
            line.set_xy2(_tail, _start, _y)

        if array.size(_bodies) > _lookback
            line.delete(array.shift(_bodies))
        if array.size(_heads) > _lookback
            line.delete(array.shift(_heads))

    if barstate.islast
        line.set_x2(_body, _end)
        label.set_x(_label, _end)

        if i_areHeadsEnabled and array.size(_heads) > 1
            // Not updating the last open's projection
            for i = 0 to array.size(_heads) - 2
                // Avoid projecting on last opens bodies
                if not array.includes(a_lastOpens, line.get_y1(array.get(_heads, i)))
                    line.set_x2(array.get(_heads, i), f_getRightBarIndex(HEAD_PADDING))

//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

if canShowDaily and hasDailyTimeChanged 
    array.set(a_lastOpens, 0, discoverPrices ? open : dailyOpen)

if canShowWeekly and hasWeekklyTimeChanged
    array.set(a_lastOpens, 1, discoverPrices ? open : weeklyOpen)

if canShowMonthly and hasMonthlyTimeChanged
    array.set(a_lastOpens, 2, discoverPrices ? open : monthlyOpen)

if canShowYearly and hasYearlyTimeChanged
    array.set(a_lastOpens, 3, discoverPrices ? open : yearlyOpen)

//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

if canShowYearly
    f_draw(hasYearlyTimeChanged, array.get(a_lastOpens, 3), i_yearlyLookback, f_getPadding(3), i_yearlyColor, "Y   ", f_isContainedOnPrevWeekly(yearlyTime))

if canShowMonthly
    f_draw(hasMonthlyTimeChanged, array.get(a_lastOpens, 2), i_monthlyLookback, f_getPadding(2), i_monthlyColor, "M   ", f_isContainedOnPrevWeekly(monthlyTime))

if canShowWeekly
    f_draw(hasWeekklyTimeChanged, array.get(a_lastOpens, 1), i_weeklyLookback, f_getPadding(1), i_weeklyColor, "W   ")

if canShowDaily
    f_draw(hasDailyTimeChanged, array.get(a_lastOpens, 0), i_dailyLookback, f_getPadding(0), i_dailyColor, "D   ")


for timeframe_index=0 to (array.size(a_deadzone_checks)-1)
    if array.get(a_deadzone_checks, timeframe_index)
        array.set(a_deadzone_checks, timeframe_index, f_check_deadzone(array.get(a_lastOpens, timeframe_index), last_price))

if not na(last_alert_time) and (timenow - last_alert_time) > (i_time_ignore * 60 * 1000)
    array.set(a_deadzone_checks, 0, false)
    array.set(a_deadzone_checks, 1, false)
    array.set(a_deadzone_checks, 2, false)
    array.set(a_deadzone_checks, 3, false)

if i_enable_y_alert and not array.get(a_deadzone_checks, 3) and ta.crossover(array.get(a_lastOpens, 3), last_price)
    alert("Yearly crossover on " + ticker.standard(syminfo.tickerid))
    array.set(a_deadzone_checks, 3, true)
    last_alert_time := timenow

else if i_enable_m_alert and not array.get(a_deadzone_checks, 2) and ta.crossover(array.get(a_lastOpens, 2), last_price)
    alert("Monthly crossover on " + ticker.standard(syminfo.tickerid))
    array.set(a_deadzone_checks, 2, true)
    last_alert_time := timenow

else if i_enable_w_alert and not array.get(a_deadzone_checks, 1) and ta.crossover(array.get(a_lastOpens, 1), last_price)
    alert("Weekly crossover on " + ticker.standard(syminfo.tickerid))
    array.set(a_deadzone_checks, 1, true)
    last_alert_time := timenow

else if i_enable_d_alert and not array.get(a_deadzone_checks, 0) and ta.crossover(array.get(a_lastOpens, 0), last_price)
    alert("Daily crossover on " + ticker.standard(syminfo.tickerid))
    array.set(a_deadzone_checks, 0, true)
    last_alert_time := timenow



// Plot invisible opens for displaying last values in `status line`, `scale`, `data window` as well for providing defaults alert conditions
plot(array.get(a_lastOpens, 0), "D",    color.new(i_dailyColor, 100),   editable=false)
plot(array.get(a_lastOpens, 1), "W",    color.new(i_weeklyColor, 100),  editable=false)
plot(array.get(a_lastOpens, 2), "M",    color.new(i_monthlyColor, 100), editable=false)
plot(array.get(a_lastOpens, 3), "Y",    color.new(i_yearlyColor, 100),  editable=false)
plot(array.get(a_lastOpens, 2), "M",    color.new(i_monthlyColor, 100), editable=false)
plot(array.get(a_lastOpens, 3), "Y",    color.new(i_yearlyColor, 100),  editable=false)
